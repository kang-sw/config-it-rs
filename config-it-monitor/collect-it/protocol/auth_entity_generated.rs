// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AuthEntityOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AuthEntity<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AuthEntity<'a> {
  type Inner = AuthEntity<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AuthEntity<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PW_SHA256: flatbuffers::VOffsetT = 6;
  pub const VT_WRITE_ACCESS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AuthEntity { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AuthEntityArgs<'args>
  ) -> flatbuffers::WIPOffset<AuthEntity<'bldr>> {
    let mut builder = AuthEntityBuilder::new(_fbb);
    if let Some(x) = args.pw_sha256 { builder.add_pw_sha256(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_write_access(args.write_access);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AuthEntity::VT_ID, None)}
  }
  #[inline]
  pub fn pw_sha256(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AuthEntity::VT_PW_SHA256, None)}
  }
  #[inline]
  pub fn write_access(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AuthEntity::VT_WRITE_ACCESS, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AuthEntity<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pw_sha256", Self::VT_PW_SHA256, false)?
     .visit_field::<bool>("write_access", Self::VT_WRITE_ACCESS, false)?
     .finish();
    Ok(())
  }
}
pub struct AuthEntityArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pw_sha256: Option<flatbuffers::WIPOffset<&'a str>>,
    pub write_access: bool,
}
impl<'a> Default for AuthEntityArgs<'a> {
  #[inline]
  fn default() -> Self {
    AuthEntityArgs {
      id: None,
      pw_sha256: None,
      write_access: false,
    }
  }
}

pub struct AuthEntityBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AuthEntityBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AuthEntity::VT_ID, id);
  }
  #[inline]
  pub fn add_pw_sha256(&mut self, pw_sha256: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AuthEntity::VT_PW_SHA256, pw_sha256);
  }
  #[inline]
  pub fn add_write_access(&mut self, write_access: bool) {
    self.fbb_.push_slot::<bool>(AuthEntity::VT_WRITE_ACCESS, write_access, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AuthEntityBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AuthEntityBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AuthEntity<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AuthEntity<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AuthEntity");
      ds.field("id", &self.id());
      ds.field("pw_sha256", &self.pw_sha256());
      ds.field("write_access", &self.write_access());
      ds.finish()
  }
}
