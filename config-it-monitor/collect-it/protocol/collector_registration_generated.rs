// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CollectorRegistrationOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CollectorRegistration<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CollectorRegistration<'a> {
  type Inner = CollectorRegistration<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CollectorRegistration<'a> {
  pub const VT_AUTH_INFOS: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_APP_KEY: flatbuffers::VOffsetT = 8;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 10;
  pub const VT_EPOCH_UTC: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CollectorRegistration { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args CollectorRegistrationArgs<'args>
  ) -> flatbuffers::WIPOffset<CollectorRegistration<'bldr>> {
    let mut builder = CollectorRegistrationBuilder::new(_fbb);
    builder.add_epoch_utc(args.epoch_utc);
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.app_key { builder.add_app_key(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.auth_infos { builder.add_auth_infos(x); }
    builder.finish()
  }


  #[inline]
  pub fn auth_infos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AuthEntity<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AuthEntity>>>>(CollectorRegistration::VT_AUTH_INFOS, None)}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectorRegistration::VT_NAME, None)}
  }
  #[inline]
  pub fn app_key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectorRegistration::VT_APP_KEY, None)}
  }
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectorRegistration::VT_DESCRIPTION, None)}
  }
  #[inline]
  pub fn epoch_utc(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(CollectorRegistration::VT_EPOCH_UTC, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CollectorRegistration<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AuthEntity>>>>("auth_infos", Self::VT_AUTH_INFOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("app_key", Self::VT_APP_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<u64>("epoch_utc", Self::VT_EPOCH_UTC, false)?
     .finish();
    Ok(())
  }
}
pub struct CollectorRegistrationArgs<'a> {
    pub auth_infos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AuthEntity<'a>>>>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub app_key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub epoch_utc: u64,
}
impl<'a> Default for CollectorRegistrationArgs<'a> {
  #[inline]
  fn default() -> Self {
    CollectorRegistrationArgs {
      auth_infos: None,
      name: None,
      app_key: None,
      description: None,
      epoch_utc: 0,
    }
  }
}

pub struct CollectorRegistrationBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CollectorRegistrationBuilder<'a, 'b> {
  #[inline]
  pub fn add_auth_infos(&mut self, auth_infos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AuthEntity<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectorRegistration::VT_AUTH_INFOS, auth_infos);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectorRegistration::VT_NAME, name);
  }
  #[inline]
  pub fn add_app_key(&mut self, app_key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectorRegistration::VT_APP_KEY, app_key);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectorRegistration::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_epoch_utc(&mut self, epoch_utc: u64) {
    self.fbb_.push_slot::<u64>(CollectorRegistration::VT_EPOCH_UTC, epoch_utc, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CollectorRegistrationBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CollectorRegistrationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CollectorRegistration<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CollectorRegistration<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CollectorRegistration");
      ds.field("auth_infos", &self.auth_infos());
      ds.field("name", &self.name());
      ds.field("app_key", &self.app_key());
      ds.field("description", &self.description());
      ds.field("epoch_utc", &self.epoch_utc());
      ds.finish()
  }
}
